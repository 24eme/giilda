CONFIGFILE=config/databases.yml
TMPFILE=/tmp/couchdb.$$.tmp

url=$(grep 'dsn:' $CONFIGFILE | sed 's/.*dsn: //' | sed 's/[^\/]*$//')
base=$(grep 'dbname:' $CONFIGFILE | sed 's/.*dbname: //' | sed 's/\W*$//')
COUCHDBURL=$url$base

design=etablissement
curl -s -X DELETE "$COUCHDBURL/_design/$design?rev=$(curl --stderr /dev/null $COUCHDBURL/_design/$design | sed 's/.*_rev":"//' | sed 's/",".*//' 2> /dev/null)" > /dev/null 2>&1

cat <<EOF > $TMPFILE
{
   "_id": "_design/etablissement",
   "language": "javascript",
   "views": {
       "tous": {
           "map": "function(doc) {\n\n\tif (doc.type != \"Etablissement\") {\n      \t\treturn ;     \n    \t}     \n\n  \temit([doc.famille, doc.commune, doc.code_postal, doc.cvi, doc.nom, doc.identifiant], 1);\n}"
       }
   }
}
EOF

curl -s -X PUT -d "@$TMPFILE" $COUCHDBURL/_design/$design

curl -s $COUCHDBURL/_design/$design/_view/all > /dev/null &
sleep 1
kill %1


design=configuration
curl -s -X DELETE "$COUCHDBURL/_design/$design?rev=$(curl --stderr /dev/null $COUCHDBURL/_design/$design | sed 's/.*_rev":"//' | sed 's/",".*//' 2> /dev/null)" > /dev/null 2>&1

cat <<EOF > $TMPFILE
{
   "language": "javascript",
   "views": {
       "produits": {
           "map": "function(doc) {\n    if (doc.type != \"Configuration\")\n    return ;\n    var inter = new Array();\n    var dep = new Array(new Array(\"\"));\n    var libelles = new Array();\n    var codes = new Array();\n\n    for (c in doc.declaration.certifications) {\n        var interpros = new Array();\n        for(interpro_key in doc.declaration.certifications[c].interpro) {\n            interpros.push(interpro_key);\n            for(label_index in doc.declaration.certifications[c].interpro[interpro_key].labels) {\n                label_key = doc.declaration.certifications[c].interpro[interpro_key].labels[label_index];\n                emit([\"labels\", c, interpro_key, label_key], doc.labels[label_key]);\n            }\n        }\n        inter.unshift(interpros);\n        dep.unshift(doc.declaration.certifications[c].departements);\n        libelles.push(doc.declaration.certifications[c].libelle);\n        codes.push(doc.declaration.certifications[c].code);\n        for (g in doc.declaration.certifications[c].genres) {\n            var interpros = new Array();\n            for(interpro_key in doc.declaration.certifications[c].genres[g].interpro) {\n                interpros.push(interpro_key);\n            }\n            inter.unshift(interpros);\n            dep.unshift(doc.declaration.certifications[c].genres[g].departements);\n            libelles.push(doc.declaration.certifications[c].genres[g].libelle);\n            codes.push(doc.declaration.certifications[c].genres[g].code);\n            for (a in doc.declaration.certifications[c].genres[g].appellations) {\n                var interpros = new Array();\n                for(interpro_key in doc.declaration.certifications[c].genres[g].appellations[a].interpro) {\n                    interpros.push(interpro_key);\n                }\n                inter.unshift(interpros);\n                dep.unshift(doc.declaration.certifications[c].genres[g].appellations[a].departements);\n                libelles.push(doc.declaration.certifications[c].genres[g].appellations[a].libelle);\n                codes.push(doc.declaration.certifications[c].genres[g].appellations[a].code);\n                var libes = libelles.slice();\n                var hash = \"declaration/certifications/\"+c+\"/genres/\"+g+\"/appellations/\"+a;\n                for(i in inter) {\n                    if (inter[i].length > 0) {\n                        for(array_intepro_key in inter) {\n                            for(array_dep_key in dep) {\n                                if (dep[array_dep_key].length > 0) {\n                                    for(d in dep[array_dep_key]) {\n                                        emit([\"appellations\", c, inter[i][array_intepro_key], dep[array_dep_key][d], hash, codes.join('')], libes);\n                                    }\n                                    break;\n                                }\n                            }\n                            break;\n                        }\n                        break;\n                    }\n                }\n                for(m in doc.declaration.certifications[c].genres[g].appellations[a].mentions) {\n                    dep.unshift(doc.declaration.certifications[c].genres[g].appellations[a].mentions[m].departements);\n                    libelles.push(doc.declaration.certifications[c].genres[g].appellations[a].mentions[m].libelle);\n                    codes.push(doc.declaration.certifications[c].genres[g].appellations[a].mentions[m].code);\n                for(l in doc.declaration.certifications[c].genres[g].appellations[a].mentions[m].lieux) {\n                    dep.unshift(doc.declaration.certifications[c].genres[g].appellations[a].mentions[m].lieux[l].departements);\n                    libelles.push(doc.declaration.certifications[c].genres[g].appellations[a].mentions[m].lieux[l].libelle);\n                    codes.push(doc.declaration.certifications[c].genres[g].appellations[a].mentions[m].lieux[l].code);\n                    for(co in doc.declaration.certifications[c].genres[g].appellations[a].mentions[m].lieux[l].couleurs) {\n                        libelles.push(doc.declaration.certifications[c].genres[g].appellations[a].mentions[m].lieux[l].couleurs[co].libelle);\n                        codes.push(doc.declaration.certifications[c].genres[g].appellations[a].mentions[m].lieux[l].couleurs[co].code);\n                        for(ce in doc.declaration.certifications[c].genres[g].appellations[a].mentions[m].lieux[l].couleurs[co].cepages) {\n                            libelles.push(doc.declaration.certifications[c].genres[g].appellations[a].mentions[m].lieux[l].couleurs[co].cepages[ce].libelle);\n                            codes.push(doc.declaration.certifications[c].genres[g].appellations[a].mentions[m].lieux[l].couleurs[co].cepages[ce].code);        \n                            var libes = libelles.slice();\n                            var hash = \"declaration/certifications/\"+c+\"/genres/\"+g+\"/appellations/\"+a+\"/mentions/\"+m+\"/lieux/\"+l+\"/couleurs/\"+co+\"/cepages/\"+ce;\n                            emit([\"produits\", \"\", \"\", c, a, hash, codes.join('')], libes);\n                            libelles.splice(libelles.length-1, 1);\n                            codes.splice(codes.length-1, 1);\n                        }\n                        libelles.splice(libelles.length-1, 1);\n                        codes.splice(codes.length-1, 1);\n                    }\n                    dep.splice(0, 1);\n                    libelles.splice(libelles.length-1, 1);\n                    codes.splice(codes.length-1, 1);\n                }\n                    dep.splice(0, 1);\n                    libelles.splice(libelles.length-1, 1);\n                    codes.splice(codes.length-1, 1);\n                }\n                inter.splice(0,1);\n                dep.splice(0, 1);\n                libelles.splice(libelles.length-1, 1);\n                codes.splice(codes.length-1, 1);\n            }\n            inter.splice(0, 1);\n            dep.splice(0, 1);\n            libelles.splice(libelles.length-1, 1);\n            codes.splice(codes.length-1, 1);\n        }\n        inter.splice(0, 1);\n        dep.splice(0, 1);\n        libelles.splice(libelles.length-1, 1);\n        codes.splice(codes.length-1, 1);\n    }\n}\n",
           "reduce": "function (keys, values, rereduce) {\n     return values.length;\n}"
       }
    }
}
EOF

curl -s -X PUT -d "@$TMPFILE" $COUCHDBURL/_design/$design

curl -s $COUCHDBURL/_design/$design/_view/all > /dev/null &
sleep 1
kill %1


design=vrac
curl -s -X DELETE "$COUCHDBURL/_design/$design?rev=$(curl --stderr /dev/null $COUCHDBURL/_design/$design | sed 's/.*_rev":"//' | sed 's/",".*//' 2> /dev/null)" > /dev/null 2>&1

cat <<EOF > $TMPFILE
{
   "language": "javascript",
   "views": {
        "history": {
            "map": "function(doc) {\n  if (doc.type != \"Vrac\")\n     return;\n  emit([doc._id], [doc.valide.statut, doc._id, doc.acheteur_identifiant, doc.acheteur.nom, doc.vendeur_identifiant, doc.vendeur.nom,\n\t           doc.mandataire_identifiant,doc.mandataire.nom, doc.type_transaction, doc.produit, doc.volume_propose, doc.volume_enleve]);\n}"
        },
        "soussigneidentifiant": {
            "map": "function(doc) {\n  if (doc.type != \"Vrac\")\n     return;\n  emit([\"STATUT\", doc.mandataire_identifiant, doc.valide.statut, doc.type_transaction],  [doc.valide.statut, doc._id, doc.acheteur_identifiant, doc.acheteur.nom, doc.vendeur_identifiant, doc.vendeur.nom, doc.mandataire_identifiant,doc.mandataire.nom, doc.type_transaction, doc.produit, doc.volume_propose, doc.volume_enleve]);\n  emit([\"STATUT\", doc.acheteur_identifiant, doc.valide.statut, doc.type_transaction], [doc.valide.statut, doc._id, doc.acheteur_identifiant, doc.acheteur.nom, doc.vendeur_identifiant, doc.vendeur.nom, doc.mandataire_identifiant,doc.mandataire.nom, doc.type_transaction, doc.produit, doc.volume_propose, doc.volume_enleve]);\n  emit([\"STATUT\", doc.vendeur_identifiant, doc.valide.statut, doc.type_transaction], [doc.valide.statut, doc._id, doc.acheteur_identifiant, doc.acheteur.nom, doc.vendeur_identifiant, doc.vendeur.nom, doc.mandataire_identifiant,doc.mandataire.nom, doc.type_transaction, doc.produit, doc.volume_propose, doc.volume_enleve]);\n  emit([\"TYPE\", doc.mandataire_identifiant, doc.type_transaction],  [doc.valide.statut, doc._id, doc.acheteur_identifiant, doc.acheteur.nom, doc.vendeur_identifiant, doc.vendeur.nom, doc.mandataire_identifiant,doc.mandataire.nom, doc.type_transaction, doc.produit, doc.volume_propose, doc.volume_enleve]);\n  emit([\"TYPE\", doc.acheteur_identifiant, doc.type_transaction], [doc.valide.statut, doc._id, doc.acheteur_identifiant, doc.acheteur.nom, doc.vendeur_identifiant, doc.vendeur.nom, doc.mandataire_identifiant,doc.mandataire.nom, doc.type_transaction, doc.produit, doc.volume_propose, doc.volume_enleve]);\n  emit([\"TYPE\", doc.vendeur_identifiant, doc.type_transaction], [doc.valide.statut, doc._id, doc.acheteur_identifiant, doc.acheteur.nom, doc.vendeur_identifiant, doc.vendeur.nom, doc.mandataire_identifiant,doc.mandataire.nom, doc.type_transaction, doc.produit, doc.volume_propose, doc.volume_enleve]);\n}"
        },
        "vracSimilaire": {
            "map": "function(doc) {\n  if (doc.type != \"Vrac\")\n     return;\n  if((doc.valide.statut == null) || (doc.valide.statut == \"ANNULE\"))\n     return;\n  emit([doc.vendeur_identifiant, doc.acheteur_identifiant, doc.mandataire_identifiant, doc.type_transaction, doc.produit, doc.volume_propose],  [ doc._id, doc.valide.statut, doc.millesime, doc.volume_propose]);\n }"
        },
        "domaines": {
            "map": "function(doc) {\n  if (doc.type != \"Vrac\")\n     return;\n  if (doc.domaine) {\n  emit([doc.vendeur_identifiant, doc.domaine],  1);\n  }\n }",
            "reduce": "function (keys, values) {\n     \treturn sum(values);\n}"
        },
        "contratsFromProduit": {
           "map": "function(doc) {\n  if (doc.type != \"Vrac\") return;\n  if(doc.valide.statut == \"NONSOLDE\")\n    emit([doc.vendeur_identifiant, doc.produit],[doc.numero_contrat, doc.volume_propose, doc.volume_enleve, doc.valide.statut]);\n}"
       }
   }
}
EOF

curl -s -X PUT -d "@$TMPFILE" $COUCHDBURL/_design/$design

curl -s $COUCHDBURL/_design/$design/_view/all > /dev/null &
sleep 1
kill %1

design=drm
curl -s -X DELETE "$COUCHDBURL/_design/$design?rev=$(curl --stderr /dev/null $COUCHDBURL/_design/$design | sed 's/.*_rev":"//' | sed 's/",".*//' 2> /dev/null)" > /dev/null 2>&1

cat <<EOF > $TMPFILE
{
   "_id": "_design/drm",
   "language": "javascript",
   "views": {
       "all": {
           "map": "function(doc) {\n  if (doc.type == \"DRM\") {\n  rect = null ; if (doc.rectificative) rect = doc.rectificative;\n  emit([doc.identifiant, (doc.campagne).substring(0, 4), (doc.campagne).substring(5, 7), rect, doc.valide.date_saisie, doc.douane.envoi, doc.douane.accuse, doc._id], 1);\n }\n}",
           "reduce": "function (keys, values, rereduce) {\n     return sum(values);\n}"
       },
       "date": {
          "map": "function(doc) { if (doc.type == \"DRM\" && doc.valide.date_saisie) { rect = null ; if (doc.rectificative) rect = doc.rectificative; for(inter in doc.interpros) { emit([doc.interpros[inter], doc.valide.date_saisie, doc._id], 1);  }  } }"
       },
       "produits": {
           "map": "function(doc) {\n  if (doc.type == \"DRM\") {\nfor (certification in doc.declaration.certifications) {\n        for (appellation in doc.declaration.certifications[certification].appellations) {\n            for(lieu in doc.declaration.certifications[certification].appellations[appellation].lieux) {\n                for(couleur in doc.declaration.certifications[certification].appellations[appellation].lieux[lieu].couleurs) {\n                    for(cepage in doc.declaration.certifications[certification].appellations[appellation].lieux[lieu].couleurs[couleur].cepages) {    \n                        for(millesime in doc.declaration.certifications[certification].appellations[appellation].lieux[lieu].couleurs[couleur].cepages[cepage].millesimes) {\n                            var hash = \"declaration/certifications/\"+certification+\"/appellations/\"+appellation+\"/lieux/\"+lieu+\"/couleurs/\"+couleur+\"/cepages/\"+cepage+\"/millesimes/\"+millesime;\n\t\t\t    emit([\"produit\", hash], 1);\n                        } // Boucle millesime\n                    } // Boucle cepage\n                } // Boucle couleur\n            } // Boucle lieu\n        } // Boucle appellation\n    } // Boucle certification\n }\n}"
       }
}
}
EOF

curl -s -X PUT -d "@$TMPFILE" $COUCHDBURL/_design/$design

curl -s $COUCHDBURL/_design/$design/_view/all > /dev/null &
sleep 1
kill %1
