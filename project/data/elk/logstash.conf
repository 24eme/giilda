input {
  couchdb_changes {
    db => "COUCHBASE"
    sequence_path => "COUCHBASE_couchdb_seq"
    tags => ["COUCHBASE"]
  }

}
filter {
  if "COUCHBASE" in [tags] {
    if [@metadata][action] != 'delete' {
      if [@metadata][_id] =~ /^DRM-.+$/ {
        mutate {
          add_field => { "type" => "%{[@metadata][_id]}" }
        }
        mutate {
          gsub => [
          "type", "^([A-Z]+)-.+$", "\1"
          ]
        }

        ruby {
          code => "
          require 'digest/md5';
          identifiant = event['doc']['identifiant']
          stocks = ['total_debut_mois','total']
          periode = event['doc']['periode']
          mouvements = []
          event['doc']['declaration']['certifications'].each{|keyCertif, certif|
            certif['genres'].each{|keyGenre, genre|
              genre['appellations'].each{|keyAppellation, appellation|
                appellation['mentions'].each{|keyMention, mention|
                  mention['lieux'].each{|keyLieu, lieu|
                    lieu['couleurs'].each{|keyCouleur, couleur|
                      couleur['cepages'].each{|keyCepage, cepage|
                        if cepage.key?('details') then
                        cepage['details'].each{|keyDetail, detail|
                          if defined?(detail).nil?
                          next
                          end
                          hash = '/declaration/certifications/'+keyCertif+'/genres/'+keyGenre+'/appellations/'+keyAppellation+'/mentions/'+keyMention+'/lieux/'+keyLieu+'/couleurs/'+keyCouleur+'/cepages/'+keyCepage+'/details/'+keyDetail
                          stocks.each{|s|
                            stock = {}
                              stock['categorie'] = 'stocks'
                              stock['produit_hash'] = hash
                              stock['produit_libelle'] = detail['produit_libelle']
                              stock['type_hash'] = s
                              stock['type_libelle'] = s
                              stock['type_drm'] = 'SUSPENDU'
                              stock['type_drm_libelle'] = 'Suspendu'
                              stock['vrac_numero'] = nil
                              stock['vrac_destinataire'] = nil
                              stock['detail_identifiant'] = nil
                              stock['detail_libelle'] = nil
                              stock['volume'] = detail[s]
                              stock['region'] = event['doc']['region']
                              stock['region_destinataire'] = event['doc']['region_destinataire']
                              stock['date'] = periode[0,4] + '-' + periode[4,2] + '-15'
                              stock['date_version'] = event['doc']['valide']['date_saisie']

                              stock['certification'] = keyCertif
                              stock['genre'] = keyGenre
                              stock['appellation'] = keyAppellation
                              stock['mention'] =  keyMention
                              stock['lieu'] =  keyLieu
                              stock['couleur'] =  keyCouleur
                              stock['cepage'] =  keyCepage
                              stock['denomination_complementaire'] =  detail['denomination_complementaire']
                              id = Digest::MD5.hexdigest(hash + ' ' + s)
                              stock['id'] = 'DRM-'+event['doc']['identifiant']+'-'+event['doc']['periode']+'-'+id
                              stock['cvo'] = detail['cvo']['taux']
                              mouvements.push(stock)

                            }
                          }
                          end
                          if cepage.key?('detailsACQUITTE') then
                          cepage['detailsACQUITTE'].each{|keyDetailAcq, detailAcq|
                            if defined?(detailAcq).nil?
                            next
                            end
                            hash = '/declaration/certifications/'+keyCertif+'/genres/'+keyGenre+'/appellations/'+keyAppellation+'/mentions/'+keyMention+'/lieux/'+keyLieu+'/couleurs/'+keyCouleur+'/cepages/'+keyCepage+'/detailsACQUITTE/'+keyDetailAcq
                            stocks.each{|s|
                              stock = {}
                                stock['categorie'] = 'stocks'
                                stock['produit_hash'] = hash
                                stock['produit_libelle'] = detailAcq['produit_libelle']
                                stock['type_hash'] = s
                                stock['type_drm'] = 'ACQUITTE'
                                stock['type_drm_libelle'] = 'AcquittÃ©'
                                stock['type_libelle'] = s
                                stock['vrac_numero'] = nil
                                stock['vrac_destinataire'] = nil
                                stock['detail_identifiant'] = nil
                                stock['detail_libelle'] = nil
                                stock['volume'] = detailAcq[s]
                                stock['region'] = event['doc']['region']
                                stock['region_destinataire'] = event['doc']['region_destinataire']
                                stock['date'] = periode[0,4] + '-' + periode[4,2] + '-15'
                                stock['date_version'] = event['doc']['valide']['date_saisie']
                                stock['certification'] = keyCertif
                                stock['genre'] = keyGenre
                                stock['appellation'] = keyAppellation
                                stock['mention'] =  keyMention
                                stock['lieu'] =  keyLieu
                                stock['couleur'] =  keyCouleur
                                stock['cepage'] =  keyCepage
                                stock['denomination_complementaire'] =  detailAcq['denomination_complementaire']
                                id = Digest::MD5.hexdigest(hash + ' ' + s)
                                stock['id'] = 'DRM-'+event['doc']['identifiant']+'-'+event['doc']['periode']+'-'+id
                                stock['cvo'] = detailAcq['cvo']['taux']
                                mouvements.push(stock)

                              }
                            }
                            end
                          }
                        }
                      }
                    }
                  }
                }
              }
              if  event['doc']['mouvements'].key?(identifiant) then
              event['doc']['mouvements'][identifiant].each{|key, mvt|
                if defined?(mvt).nil?
                next
                end
                hash = /\/declaration\/certifications\/([a-zA-Z0-9]*)\/genres\/([a-zA-Z0-9]*)\/appellations\/([a-zA-Z0-9]*)\/mentions\/([a-zA-Z0-9]*)\/lieux\/([a-zA-Z0-9]*)\/couleurs\/([a-zA-Z0-9_]*)\/cepages\/([a-zA-Z0-9]*)/.match(mvt['produit_hash'])
                endhash = /\/cepages\/([a-zA-Z0-9]*)\/details(ACQUITTE)?\/([a-zA-Z0-9]*)/.match(mvt['produit_hash'])
                if hash.nil? then
                mvt['certification'] = nil
                mvt['genre'] = nil
                mvt['appellation'] = nil
                mvt['mention'] =  nil
                mvt['lieu'] =  nil
                mvt['couleur'] =  nil
                mvt['cepage'] =  nil
                else
                mvt['certification'] = hash[1]
                mvt['genre'] = hash[2]
                mvt['appellation'] = hash[3]
                mvt['mention'] =  hash[4]
                mvt['lieu'] =  hash[5]
                mvt['couleur'] =  hash[6]
                mvt['cepage'] =  hash[7]
                  if endhash.nil? then
                    mvt['produit_hash'] = mvt['produit_hash']+'/details/DEFAUT'
                    mvt['type_drm'] = 'SUSPENDU'
                    mvt['type_drm_libelle'] = 'Suspendu'
                  end
                end
                mvt['id'] =  event['@metadata']['_id']+'-'+key
                mvt['date'] = periode[0,4] + '-' + periode[4,2] + '-15'
                if !mvt.key?('denomination_complementaire')
                  mvt['denomination_complementaire'] = nil
                end
                mvt.delete('facture')
                mvt.delete('facturable')
                mvt.delete('version')
                mouvements.push(mvt)
              }
              end
              event['doc']['mouvements'] = mouvements
              "
            }
            mutate {
              remove_field => ["doc[declaratif]", "doc[declaration][certifications]", "doc[favoris]", "doc[apurement_possible]", "doc[commentaire]", "doc[documents_annexes]", "doc[douane]", "doc[droits]", "doc[editeurs]", "doc[email_transmission]", "doc[etape]", "doc[interpros]", "doc[observations]", "doc[precedente]", "doc[quantite_sucre]", "doc[raison_rectificative]", "doc[societe]", "doc[_attachments]"]
            }


            clone {
              clones => ["DRMMVT"]
            }


            if ([type] == "DRMMVT") {
              split {
                field => "doc[mouvements]"
              }
              ruby {
                code => "
                drmid = 'DRM-'+event['doc']['identifiant']+'-'+event['doc']['periode']
                if event['doc']['mouvements']['categorie'] != 'stocks' then
                  if event['doc']['version'] then
                    drmid = drmid + '-' + event['doc']['version']
                  end
                end
                event['doc']['drmid'] = drmid
                "
              }
              mutate {
                add_field => {"[@metadata][_id]" => "%{doc[mouvements][id]}"}
              }
              } else {
                ruby {
                  code => "
                  drmid = 'DRM-'+event['doc']['identifiant']+'-'+event['doc']['periode']
                  if event['doc']['version'] then
                  drmid = drmid + '-' + event['doc']['version']
                  end
                  event['doc']['drmid'] = drmid
                  "
                }
              }
              } else if [@metadata][_id] =~ /^VRAC-.+$/ {
                mutate {
                  add_field => { "type" => "%{[@metadata][_id]}" }
                }
                mutate {
                  gsub => [
                  "type", "^([A-Z]+)-.+$", "\1"
                  ]
                }

                ruby {
                  code => "
                  produit = event['doc']['produit']
                  hash = /\/declaration\/certifications\/([a-zA-Z0-9]*)\/genres\/([a-zA-Z0-9]*)\/appellations\/([a-zA-Z0-9]*)\/mentions\/([a-zA-Z0-9]*)\/lieux\/([a-zA-Z0-9]*)\/couleurs\/([a-zA-Z0-9_]*)\/cepages\/([a-zA-Z0-9]*)/.match(produit)
                  if hash.nil? then
                  event['doc']['certification'] = nil
                  event['doc']['genre'] = nil
                  event['doc']['appellation'] = nil
                  event['doc']['mention'] =  nil
                  event['doc']['lieu'] =  nil
                  event['doc']['couleur'] =  nil
                  event['doc']['cepage'] =  nil
                  else
                  event['doc']['certification'] = hash[1]
                  event['doc']['genre'] = hash[2]
                  event['doc']['appellation'] = hash[3]
                  event['doc']['mention'] =  hash[4]
                  event['doc']['lieu'] =  hash[5]
                  event['doc']['couleur'] =  hash[6]
                  event['doc']['cepage'] =  hash[7]
                  end
                  "
                }
                } else if [@metadata][_id] =~ /^COMPTE-.+$/ {
                  mutate {
                    add_field => { "type" => "%{[@metadata][_id]}" }
                  }
                  mutate {
                    gsub => [
                    "type", "^([A-Z]+)-.+$", "\1"
                    ]
                  }
                  } else if [@metadata][_id] =~ /^ETABLISSEMENT-.+$/ {
                    mutate {
                      add_field => { "type" => "%{[@metadata][_id]}" }
                    }
                    mutate {
                      gsub => [
                      "type", "^([A-Z]+)-.+$", "\1"
                      ]
                    }
                    }else if [@metadata][_id] =~ /^ALERTE-.+$/ {
                      mutate {
                        add_field => { "type" => "%{[@metadata][_id]}" }
                      }
                      mutate {
                        gsub => [
                        "type", "^([A-Z]+)-.+$", "\1"
                        ]
                      }
                      } else if [@metadata][_id] =~ /^SOCIETE-.+$/ {
                        ruby {
                          code => "
                          contacts = []
                          etablissements = []
                          if defined? event['doc']['contacts'] then
                          event['doc']['contacts'].each{|key, mvt|
                            contacts.push(mvt)
                          }
                          end
                          if defined? event['doc']['etablissements'] then
                          event['doc']['etablissements'].each{|key, mvt|
                            etablissements.push(mvt)
                          }
                          end
                          event['doc']['contacts'] = contacts
                          event['doc']['etablissements'] = etablissements
                          "
                        }
                        mutate {
                          add_field => { "type" => "%{[@metadata][_id]}" }
                        }
                        mutate {
                          gsub => [
                          "type", "^([A-Z]+)-.+$", "\1"
                          ]
                        }
                        } else {
                          drop { }
                        }
                      }
                    }
                  }

                  output {
                    if "COUCHBASE" in [tags] {
                      if [@metadata][action] == 'delete' {
                        } else {
                          elasticsearch {
                            index => "ELASTBASE"
                            document_id => "%{[@metadata][_id]}"
                          }
                        }
                      }
                    }
